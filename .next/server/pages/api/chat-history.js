"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/chat-history";
exports.ids = ["pages/api/chat-history"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat-history&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Cchat-history.ts&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat-history&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Cchat-history.ts&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   handler: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/api-utils */ \"(api-node)/./node_modules/next/dist/server/api-utils/index.js\");\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_chat_history_ts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./src\\pages\\api\\chat-history.ts */ \"(api-node)/./src/pages/api/chat-history.ts\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(api-node)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(api-node)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n// Import the userland code.\n\n\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_src_pages_api_chat_history_ts__WEBPACK_IMPORTED_MODULE_4__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_src_pages_api_chat_history_ts__WEBPACK_IMPORTED_MODULE_4__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/chat-history\",\n        pathname: \"/api/chat-history\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _src_pages_api_chat_history_ts__WEBPACK_IMPORTED_MODULE_4__,\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    let srcPage = \"/api/chat-history\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {}\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return;\n    }\n    const { query, params, prerenderManifest, routerServerContext } = prepareResult;\n    try {\n        const method = req.method || 'GET';\n        const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.getTracer)();\n        const activeSpan = tracer.getActiveScopeSpan();\n        const onRequestError = routeModule.instrumentationOnRequestError.bind(routeModule);\n        const invokeRouteModule = async (span)=>routeModule.render(req, res, {\n                query: {\n                    ...query,\n                    ...params\n                },\n                params,\n                allowedRevalidateHeaderKeys: [],\n                multiZoneDraftMode: Boolean(false),\n                trustHostHeader: false,\n                // TODO: get this from from runtime env so manifest\n                // doesn't need to load\n                previewProps: prerenderManifest.preview,\n                propagateError: false,\n                dev: routeModule.isDev,\n                page: \"/api/chat-history\",\n                internalRevalidate: routerServerContext == null ? void 0 : routerServerContext.revalidate,\n                onError: (...args)=>onRequestError(req, ...args)\n            }).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await invokeRouteModule(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, invokeRouteModule));\n        }\n    } catch (err) {\n        // we re-throw in dev to show the error overlay\n        if (routeModule.isDev) {\n            throw err;\n        }\n        // this is technically an invariant as error handling\n        // should be done inside of api-resolver onError\n        (0,next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__.sendError)(res, 500, 'Internal Server Error');\n    } finally{\n        // We don't allow any waitUntil work in pages API routes currently\n        // so if callback is present return with resolved promise since no\n        // pending work\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n    }\n}\n\n//# sourceMappingURL=pages-api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat-history&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Cchat-history.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./src/lib/mongo.ts":
/*!**************************!*\
  !*** ./src/lib/mongo.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongodb */ \"mongodb\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongodb__WEBPACK_IMPORTED_MODULE_0__);\n\nconst uri = process.env.MONGODB_URI;\nif (!uri) {\n    throw new Error(\"MONGODB_URI is not set in environment variables\");\n}\nlet client;\nlet clientPromise;\nif (true) {\n    if (!global._mongoClientPromise) {\n        client = new mongodb__WEBPACK_IMPORTED_MODULE_0__.MongoClient(uri);\n        global._mongoClientPromise = client.connect();\n    }\n    clientPromise = global._mongoClientPromise;\n} else {}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (clientPromise);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3NyYy9saWIvbW9uZ28udHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXNDO0FBRXRDLE1BQU1DLE1BQU1DLFFBQVFDLEdBQUcsQ0FBQ0MsV0FBVztBQUNuQyxJQUFJLENBQUNILEtBQUs7SUFDUixNQUFNLElBQUlJLE1BQU07QUFDbEI7QUFPQSxJQUFJQztBQUNKLElBQUlDO0FBRUosSUFBSUwsSUFBc0MsRUFBRTtJQUMxQyxJQUFJLENBQUNNLE9BQU9DLG1CQUFtQixFQUFFO1FBQy9CSCxTQUFTLElBQUlOLGdEQUFXQSxDQUFDQztRQUN6Qk8sT0FBT0MsbUJBQW1CLEdBQUdILE9BQU9JLE9BQU87SUFDN0M7SUFDQUgsZ0JBQWdCQyxPQUFPQyxtQkFBbUI7QUFDNUMsT0FBTyxFQUdOO0FBRUQsaUVBQWVGLGFBQWFBLEVBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xca2FydGlcXERlc2t0b3BcXENoYXRHcHRDbG9uZVxcc3JjXFxsaWJcXG1vbmdvLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vbmdvQ2xpZW50IH0gZnJvbSBcIm1vbmdvZGJcIjtcclxuXHJcbmNvbnN0IHVyaSA9IHByb2Nlc3MuZW52Lk1PTkdPREJfVVJJIGFzIHN0cmluZztcclxuaWYgKCF1cmkpIHtcclxuICB0aHJvdyBuZXcgRXJyb3IoXCJNT05HT0RCX1VSSSBpcyBub3Qgc2V0IGluIGVudmlyb25tZW50IHZhcmlhYmxlc1wiKTtcclxufVxyXG5cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby12YXJcclxuICB2YXIgX21vbmdvQ2xpZW50UHJvbWlzZTogUHJvbWlzZTxNb25nb0NsaWVudD4gfCB1bmRlZmluZWQ7XHJcbn1cclxuXHJcbmxldCBjbGllbnQ6IE1vbmdvQ2xpZW50O1xyXG5sZXQgY2xpZW50UHJvbWlzZTogUHJvbWlzZTxNb25nb0NsaWVudD47XHJcblxyXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwiZGV2ZWxvcG1lbnRcIikge1xyXG4gIGlmICghZ2xvYmFsLl9tb25nb0NsaWVudFByb21pc2UpIHtcclxuICAgIGNsaWVudCA9IG5ldyBNb25nb0NsaWVudCh1cmkpO1xyXG4gICAgZ2xvYmFsLl9tb25nb0NsaWVudFByb21pc2UgPSBjbGllbnQuY29ubmVjdCgpO1xyXG4gIH1cclxuICBjbGllbnRQcm9taXNlID0gZ2xvYmFsLl9tb25nb0NsaWVudFByb21pc2UhO1xyXG59IGVsc2Uge1xyXG4gIGNsaWVudCA9IG5ldyBNb25nb0NsaWVudCh1cmkpO1xyXG4gIGNsaWVudFByb21pc2UgPSBjbGllbnQuY29ubmVjdCgpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGllbnRQcm9taXNlO1xyXG5cclxuXHJcbiJdLCJuYW1lcyI6WyJNb25nb0NsaWVudCIsInVyaSIsInByb2Nlc3MiLCJlbnYiLCJNT05HT0RCX1VSSSIsIkVycm9yIiwiY2xpZW50IiwiY2xpZW50UHJvbWlzZSIsImdsb2JhbCIsIl9tb25nb0NsaWVudFByb21pc2UiLCJjb25uZWN0Il0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./src/lib/mongo.ts\n");

/***/ }),

/***/ "(api-node)/./src/pages/api/chat-history.ts":
/*!***************************************!*\
  !*** ./src/pages/api/chat-history.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_mongo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/mongo */ \"(api-node)/./src/lib/mongo.ts\");\n/* harmony import */ var _clerk_nextjs_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @clerk/nextjs/server */ \"@clerk/nextjs/server\");\n/* harmony import */ var _clerk_nextjs_server__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_clerk_nextjs_server__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! mongodb */ \"mongodb\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(mongodb__WEBPACK_IMPORTED_MODULE_2__);\n// src/pages/api/chat-history.ts\n\n\n\nconst dbName = process.env.MONGODB_DB || \"chatgpt-clone\";\nasync function handler(req, res) {\n    const { userId } = (0,_clerk_nextjs_server__WEBPACK_IMPORTED_MODULE_1__.getAuth)(req);\n    if (!userId) {\n        return res.status(401).json({\n            error: \"Unauthorized\"\n        });\n    }\n    try {\n        const client = await _lib_mongo__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n        const db = client.db(dbName);\n        const chats = db.collection(\"chats\");\n        const threads = db.collection(\"threads\");\n        // Ensure indexes (idempotent)\n        await chats.createIndex({\n            user: 1,\n            threadId: 1,\n            createdAt: 1\n        });\n        if (req.method === \"GET\") {\n            const { threadId, limit } = req.query;\n            const query = {\n                user: userId\n            };\n            if (threadId) query.threadId = threadId;\n            const max = Math.min(Number(limit) || 100, 200);\n            const raw = await chats.find(query).sort({\n                createdAt: 1\n            }).limit(max).toArray();\n            const userChats = raw.map((d)=>({\n                    ...d,\n                    _id: String(d._id)\n                }));\n            return res.status(200).json(userChats);\n        }\n        if (req.method === \"POST\") {\n            const { content, role, threadId, model, turnId } = req.body || {};\n            if (!content || typeof content !== \"string\") {\n                return res.status(400).json({\n                    error: \"content is required\"\n                });\n            }\n            if (role !== \"user\" && role !== \"assistant\") {\n                return res.status(400).json({\n                    error: \"role must be 'user' or 'assistant'\"\n                });\n            }\n            if (!threadId || typeof threadId !== \"string\") {\n                return res.status(400).json({\n                    error: \"threadId is required\"\n                });\n            }\n            // Ensure the thread exists and belongs to user\n            if (!mongodb__WEBPACK_IMPORTED_MODULE_2__.ObjectId.isValid(threadId)) {\n                return res.status(400).json({\n                    error: \"Invalid threadId\"\n                });\n            }\n            const thread = await threads.findOne({\n                _id: new mongodb__WEBPACK_IMPORTED_MODULE_2__.ObjectId(threadId),\n                user: userId\n            });\n            if (!thread) {\n                return res.status(404).json({\n                    error: \"Thread not found\"\n                });\n            }\n            // Turn-based storage: one document per user+assistant pair\n            if (role === 'user') {\n                const now = new Date();\n                const turnDoc = {\n                    user: userId,\n                    threadId,\n                    userContent: content,\n                    assistantContent: null,\n                    // versioning\n                    versions: [\n                        {\n                            userContent: content,\n                            assistantContent: null,\n                            createdAt: now\n                        }\n                    ],\n                    currentVersion: 0,\n                    model: model || null,\n                    createdAt: now,\n                    updatedAt: now\n                };\n                const result = await chats.insertOne(turnDoc);\n                const update = {\n                    updatedAt: now\n                };\n                if ((!thread.title || thread.title === 'New conversation') && typeof content === 'string') {\n                    update.title = content.slice(0, 60);\n                }\n                await threads.updateOne({\n                    _id: thread._id\n                }, {\n                    $set: update\n                });\n                return res.status(201).json({\n                    _id: result.insertedId.toHexString(),\n                    ...turnDoc\n                });\n            }\n            // role === 'assistant' must update existing turn\n            if (!turnId) {\n                return res.status(400).json({\n                    error: \"turnId is required for assistant replies\"\n                });\n            }\n            if (!mongodb__WEBPACK_IMPORTED_MODULE_2__.ObjectId.isValid(turnId)) {\n                return res.status(400).json({\n                    error: \"Invalid turnId\"\n                });\n            }\n            const oid = new mongodb__WEBPACK_IMPORTED_MODULE_2__.ObjectId(turnId);\n            const doc = await chats.findOne({\n                _id: oid,\n                user: userId,\n                threadId\n            });\n            if (!doc) return res.status(404).json({\n                error: 'Turn not found'\n            });\n            const versionIndex = typeof doc.currentVersion === 'number' ? doc.currentVersion : 0;\n            const result = await chats.updateOne({\n                _id: oid\n            }, {\n                $set: {\n                    assistantContent: content,\n                    model: model || null,\n                    updatedAt: new Date(),\n                    [`versions.${versionIndex}.assistantContent`]: content\n                }\n            });\n            if (result.matchedCount === 0) {\n                return res.status(404).json({\n                    error: 'Turn not found'\n                });\n            }\n            await threads.updateOne({\n                _id: thread._id\n            }, {\n                $set: {\n                    updatedAt: new Date()\n                }\n            });\n            return res.status(200).json({\n                _id: turnId,\n                ok: true\n            });\n        }\n        if (req.method === \"PATCH\") {\n            const { turnId, threadId, content } = req.body || {};\n            if (!turnId || !threadId || typeof content !== 'string') {\n                return res.status(400).json({\n                    error: \"turnId, threadId and content are required\"\n                });\n            }\n            if (!mongodb__WEBPACK_IMPORTED_MODULE_2__.ObjectId.isValid(turnId) || !mongodb__WEBPACK_IMPORTED_MODULE_2__.ObjectId.isValid(threadId)) {\n                return res.status(400).json({\n                    error: \"Invalid id(s)\"\n                });\n            }\n            const thread = await threads.findOne({\n                _id: new mongodb__WEBPACK_IMPORTED_MODULE_2__.ObjectId(threadId),\n                user: userId\n            });\n            if (!thread) return res.status(404).json({\n                error: \"Thread not found\"\n            });\n            const doc = await chats.findOne({\n                _id: new mongodb__WEBPACK_IMPORTED_MODULE_2__.ObjectId(turnId),\n                user: userId,\n                threadId\n            });\n            if (!doc) return res.status(404).json({\n                error: \"Turn not found\"\n            });\n            const newIndex = Array.isArray(doc.versions) ? doc.versions.length : 0;\n            const update = {\n                $set: {\n                    userContent: content,\n                    assistantContent: null,\n                    currentVersion: newIndex,\n                    updatedAt: new Date()\n                },\n                $push: {\n                    versions: {\n                        userContent: content,\n                        assistantContent: null,\n                        createdAt: new Date()\n                    }\n                }\n            };\n            const result = await chats.updateOne({\n                _id: new mongodb__WEBPACK_IMPORTED_MODULE_2__.ObjectId(turnId)\n            }, update);\n            if (result.matchedCount === 0) return res.status(404).json({\n                error: \"Turn not found\"\n            });\n            await threads.updateOne({\n                _id: thread._id\n            }, {\n                $set: {\n                    updatedAt: new Date(),\n                    title: thread.title || content.slice(0, 60)\n                }\n            });\n            return res.status(200).json({\n                ok: true\n            });\n        }\n        if (req.method === \"PUT\") {\n            // Set currentVersion\n            const { turnId, threadId, version } = req.body || {};\n            if (!turnId || !threadId || typeof version !== 'number') {\n                return res.status(400).json({\n                    error: \"turnId, threadId and numeric version are required\"\n                });\n            }\n            if (!mongodb__WEBPACK_IMPORTED_MODULE_2__.ObjectId.isValid(turnId) || !mongodb__WEBPACK_IMPORTED_MODULE_2__.ObjectId.isValid(threadId)) {\n                return res.status(400).json({\n                    error: \"Invalid id(s)\"\n                });\n            }\n            const doc = await chats.findOne({\n                _id: new mongodb__WEBPACK_IMPORTED_MODULE_2__.ObjectId(turnId),\n                user: userId,\n                threadId\n            });\n            if (!doc) return res.status(404).json({\n                error: \"Turn not found\"\n            });\n            const total = Array.isArray(doc.versions) ? doc.versions.length : 0;\n            if (version < 0 || version >= total) return res.status(400).json({\n                error: \"Version out of range\"\n            });\n            await chats.updateOne({\n                _id: new mongodb__WEBPACK_IMPORTED_MODULE_2__.ObjectId(turnId)\n            }, {\n                $set: {\n                    currentVersion: version,\n                    updatedAt: new Date(),\n                    userContent: doc.versions[version].userContent,\n                    assistantContent: doc.versions[version].assistantContent || null\n                }\n            });\n            await threads.updateOne({\n                _id: new mongodb__WEBPACK_IMPORTED_MODULE_2__.ObjectId(threadId)\n            }, {\n                $set: {\n                    updatedAt: new Date()\n                }\n            });\n            return res.status(200).json({\n                ok: true\n            });\n        }\n        res.setHeader(\"Allow\", [\n            \"GET\",\n            \"POST\",\n            \"PATCH\",\n            \"PUT\"\n        ]);\n        return res.status(405).end(`Method ${req.method} Not Allowed`);\n    } catch (error) {\n        console.error(error);\n        return res.status(500).json({\n            error: error.message || \"Internal Server Error\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./src/pages/api/chat-history.ts\n");

/***/ }),

/***/ "@clerk/nextjs/server":
/*!***************************************!*\
  !*** external "@clerk/nextjs/server" ***!
  \***************************************/
/***/ ((module) => {

module.exports = require("@clerk/nextjs/server");

/***/ }),

/***/ "@opentelemetry/api":
/*!*************************************!*\
  !*** external "@opentelemetry/api" ***!
  \*************************************/
/***/ ((module) => {

module.exports = require("@opentelemetry/api");

/***/ }),

/***/ "mongodb":
/*!**************************!*\
  !*** external "mongodb" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("mongodb");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fchat-history&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Cchat-history.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();